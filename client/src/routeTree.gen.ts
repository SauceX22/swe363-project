/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MarketImport } from './routes/market'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const CardDetailLazyImport = createFileRoute('/card-detail')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const CardDetailLazyRoute = CardDetailLazyImport.update({
  id: '/card-detail',
  path: '/card-detail',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/card-detail.lazy').then((d) => d.Route))

const MarketRoute = MarketImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketImport
      parentRoute: typeof rootRoute
    }
    '/card-detail': {
      id: '/card-detail'
      path: '/card-detail'
      fullPath: '/card-detail'
      preLoaderRoute: typeof CardDetailLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/market': typeof MarketRoute
  '/card-detail': typeof CardDetailLazyRoute
  '/login': typeof LoginLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/market': typeof MarketRoute
  '/card-detail': typeof CardDetailLazyRoute
  '/login': typeof LoginLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/market': typeof MarketRoute
  '/card-detail': typeof CardDetailLazyRoute
  '/login': typeof LoginLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/market' | '/card-detail' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/market' | '/card-detail' | '/login'
  id: '__root__' | '/' | '/market' | '/card-detail' | '/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MarketRoute: typeof MarketRoute
  CardDetailLazyRoute: typeof CardDetailLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MarketRoute: MarketRoute,
  CardDetailLazyRoute: CardDetailLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/market",
        "/card-detail",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/market": {
      "filePath": "market.tsx"
    },
    "/card-detail": {
      "filePath": "card-detail.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
